task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

artifacts {
    archives androidJavadocsJar, androidSourcesJar
}

/* Bintray publishing */

bintray {
    dryRun = false
    publish = true
    override = true

    Properties properties = new Properties()

    def localPropsFile = project.rootProject.file('local.properties')
    if (localPropsFile.exists()) {
        properties.load(localPropsFile.newDataInputStream())
    }

    user = properties.getProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
    key = properties.getProperty('bintrayKey') ?: System.getenv('BINTRAY_API_KEY')

    publications('release')

    pkg {
        repo = "MaterialDrawerKt"
        name = "MaterialDrawerKt"
        vcsUrl = "https://gitlab.com/zsmb/MaterialDrawerKt"

        publicDownloadNumbers = true
        licenses = ["Apache-2.0"]
        version {
            name = PUBLISH_VERSION
            vcsTag = PUBLISH_VERSION
            released = new Date()
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                artifact androidSourcesJar
                artifact androidJavadocsJar

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

/* MavenCentral publishing */

apply plugin: 'maven'
apply plugin: 'signing'

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

uploadArchives {
    archivesBaseName = PUBLISH_ARTIFACT_ID

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'MaterialDrawerKt'
                packaging 'aar'
                // optionally artifactId can be defined here
                description 'A Kotlin DSL wrapper around the mikepenz/MaterialDrawer library.'
                url 'https://github.com/zsmb13/MaterialDrawerKt'

                scm {
                    connection 'scm:git:git://github.com/zsmb13/MaterialDrawerKt.git'
                    developerConnection 'scm:git:ssh://github.com:zsmb13/MaterialDrawerKt.git'
                    url 'https://github.com/zsmb13/MaterialDrawerKt/tree/master'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'zsmb13'
                        name 'MÃ¡rton Braun'
                        email 'braunmarci@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}
